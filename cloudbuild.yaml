steps:
# Build release APK using a proven Node.js base image with Android setup
- name: 'node:20-bullseye'
  entrypoint: 'bash'
  args:
    - '-c'
    - |
      set -ex
      echo "=== Environment Setup ==="
      apt-get update -qq
      DEBIAN_FRONTEND=noninteractive apt-get install -y \
        wget unzip openjdk-17-jdk-headless git build-essential \
        ca-certificates gnupg lsb-release

      echo "=== Java Version Verification ==="
      export JAVA_HOME=/usr/lib/jvm/java-17-openjdk-amd64
      export PATH=$$JAVA_HOME/bin:$$PATH
      java -version
      echo "Node version: $$(node --version)"
      echo "NPM version: $$(npm --version)"

      echo "=== Installing Android SDK ==="
      export ANDROID_SDK_ROOT=/android-sdk
      export ANDROID_HOME=$$ANDROID_SDK_ROOT
      mkdir -p $$ANDROID_SDK_ROOT
      cd $$ANDROID_SDK_ROOT

      echo "Downloading Android command line tools..."
      wget -q https://dl.google.com/android/repository/commandlinetools-linux-9477386_latest.zip
      unzip -q commandlinetools-linux-9477386_latest.zip
      rm commandlinetools-linux-9477386_latest.zip

      echo "Setting up command line tools structure..."
      mkdir -p cmdline-tools/latest
      mv cmdline-tools/* cmdline-tools/latest/ 2>/dev/null || true
      rmdir cmdline-tools || true

      export PATH=$$ANDROID_SDK_ROOT/cmdline-tools/latest/bin:$$ANDROID_SDK_ROOT/platform-tools:$$PATH

      echo "=== Installing Android SDK components ==="
      echo "Installing SDK manager components..."
      yes | sdkmanager --licenses 2>/dev/null || true
      sdkmanager --install \
        "platform-tools" \
        "platforms;android-33" \
        "build-tools;33.0.0" \
        "cmdline-tools;latest"

      echo "=== Building React Native App ==="
      cd /workspace
      ls -la

      echo "=== Installing Dependencies ==="
      npm ci --legacy-peer-deps --cache /tmp/.npm

      echo "=== Creating React Native Bundle ==="
      mkdir -p android/app/src/main/assets
      npx react-native bundle \
        --platform android \
        --dev false \
        --entry-file index.js \
        --bundle-output android/app/src/main/assets/index.android.bundle \
        --assets-dest android/app/src/main/res

      echo "=== Building Release APK ==="
      cd android
      chmod +x ./gradlew
      ./gradlew assembleRelease --no-daemon --stacktrace --info

      echo "=== Verifying APK ==="
      find . -name "*.apk" -type f -exec ls -la {} \;

# Step 2: Distribute the APK to testers via Firebase App Distribution.
- name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
  entrypoint: 'gcloud'
  args:
    - 'firebase'
    - 'appdistribution:distribute'
    - 'android/app/build/outputs/apk/release/app-release.apk'
    - '--app=1:53700756169:android:2f4d0891542f2c286d51d8'
    - '--release-notes=This build is successful. The pipeline is now fully operational.'
    - '--groups=testers'

# Make the generated APK available as a downloadable artifact.
artifacts:
  objects:
    location: 'gs://memory-lane-app-469523-builds'
    paths: ['android/app/build/outputs/apk/release/app-release.apk']

# Build options for performance
options:
  machineType: 'E2_HIGHCPU_8'
  diskSizeGb: 100
  logging: CLOUD_LOGGING_ONLY

# Set a generous timeout for the build
timeout: 3600s
