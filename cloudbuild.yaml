steps:
# Build release APK using the proven React Native Android image
- name: 'gcr.io/cloud-builders/docker'
  args:
    - 'run'
    - '--rm'
    - '-v'
    - '/workspace:/workspace'
    - '-w'
    - '/workspace'
    - 'reactnativecommunity/react-native-android:latest'
    - 'bash'
    - '-c'
    - |
      set -e
      echo "=== Installing Dependencies ==="
      npm install --legacy-peer-deps

      echo "=== Creating React Native Bundle ==="
      mkdir -p android/app/src/main/assets
      npx react-native bundle \
        --platform android \
        --dev false \
        --entry-file index.js \
        --bundle-output android/app/src/main/assets/index.android.bundle \
        --assets-dest android/app/src/main/res

      echo "=== Building Release APK ==="
      cd android
      chmod +x gradlew
      ./gradlew assembleRelease --no-daemon --stacktrace

      echo "=== Verifying APK ==="
      find . -name "*.apk" -type f -exec ls -la {} \;

# Step 2: Distribute the APK to testers via Firebase App Distribution.
- name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
  entrypoint: 'gcloud'
  args:
    - 'firebase'
    - 'appdistribution:distribute'
    - 'android/app/build/outputs/apk/release/app-release.apk'
    - '--app=1:53700756169:android:2f4d0891542f2c286d51d8'
    - '--release-notes=This build is successful. The pipeline is now fully operational.'
    - '--groups=testers'

# Make the generated APK available as a downloadable artifact.
artifacts:
  objects:
    location: 'gs://memory-lane-app-469523-builds'
    paths: ['android/app/build/outputs/apk/release/app-release.apk']

# Set a generous timeout for the build.
timeout: 3600s
