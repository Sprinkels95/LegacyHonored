apply plugin: "com.android.application"
apply plugin: "com.facebook.react"
apply plugin: "com.google.gms.google-services"

import com.android.build.OutputFile

/**
 * Legacy Honored Android Build Configuration
 */

android {
    ndkVersion rootProject.ext.ndkVersion
    compileSdkVersion rootProject.ext.compileSdkVersion

    namespace "com.memorylane.app"

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }
    defaultConfig {
        applicationId "com.memorylane.app"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 1
        versionName "1.0.0"

        // Legacy Honored specific
        resValue "string", "app_name", "Legacy Honored"
        resValue "string", "app_description", "Technology that honors your life's work"
    }

    splits {
        abi {
            reset()
            enable project.hasProperty('enableSeparateBuildPerCPUArchitecture') ? enableSeparateBuildPerCPUArchitecture.toBoolean() : false
            universalApk false  // If true, also generate a universal APK
            include "armeabi-v7a", "x86", "arm64-v8a", "x86_64"
        }
    }

    signingConfigs {
        debug {
            storeFile file('debug.keystore')
            storePassword 'android'
            keyAlias 'androiddebugkey'
            keyPassword 'android'
        }
        release {
            // Production keystore configuration
            // For security, credentials are loaded from environment variables
            storeFile file(System.getenv("RELEASE_KEYSTORE_PATH") ?: 'debug.keystore')
            storePassword System.getenv("RELEASE_STORE_PASSWORD") ?: 'android'
            keyAlias System.getenv("RELEASE_KEY_ALIAS") ?: 'androiddebugkey'
            keyPassword System.getenv("RELEASE_KEY_PASSWORD") ?: 'android'
        }
    }

    buildTypes {
        debug {
            signingConfig signingConfigs.debug
        }
        release {
            signingConfig signingConfigs.release
            minifyEnabled project.hasProperty('enableProguardInReleaseBuilds') ? enableProguardInReleaseBuilds.toBoolean() : false
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
        }
    }

    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            def versionCodes = ["armeabi-v7a": 1, "x86": 2, "arm64-v8a": 3, "x86_64": 4]
            def abi = output.getFilter(OutputFile.ABI)
            if (abi != null) {
                output.versionCodeOverride =
                        defaultConfig.versionCode * 1000 + versionCodes.get(abi)
            }
        }
    }
}

dependencies {
    // Import the Firebase BoM
    implementation(platform("com.google.firebase:firebase-bom:34.3.0"))
    implementation 'com.google.firebase:firebase-analytics'
    implementation fileTree(dir: "libs", include: ["*.jar"])
    implementation "com.facebook.react:react-native:+"
    implementation "androidx.swiperefreshlayout:swiperefreshlayout:1.0.0"

    // Voice and TTS dependencies are auto-linked by React Native
    // implementation project(':react-native-voice')
    // implementation project(':react-native-tts')

    if (project.hasProperty('FLIPPER_VERSION')) {
        debugImplementation("com.facebook.flipper:flipper:${FLIPPER_VERSION}") {
            exclude group:'com.facebook.fbjni'
        }
        debugImplementation("com.facebook.flipper:flipper-network-plugin:${FLIPPER_VERSION}") {
            exclude group:'com.facebook.flipper'
            exclude group:'com.squareup.okhttp3', module:'okhttp'
        }
        debugImplementation("com.facebook.flipper:flipper-fresco-plugin:${FLIPPER_VERSION}")
    }

    if (project.hasProperty('enableHermes') && enableHermes.toBoolean()) {
        def hermesPath = "../../node_modules/hermes-engine/android/"
        debugImplementation files(hermesPath + "hermes-debug.aar")
        releaseImplementation files(hermesPath + "hermes-release.aar")
    } else {
        // JSC is the default JS engine - no explicit dependency needed
        // implementation jscFlavor
    }
}

apply from: file("../../node_modules/@react-native-community/cli-platform-android/native_modules.gradle"); applyNativeModulesAppBuildGradle(project)